import AMQPProtocol

/// Options for the consumer of a queue.
///
/// This is the main configuration for a given `Consumer`.
public struct ConsumerOptions: Sendable {
    public var consumerTag: String
    public var noAck: Bool
    public var exclusive: Bool
    public var args: Table

    /// Create the consumer options.
    ///
    /// For more information on the options used, see the [basicConsume](https://github.com/funcmike/rabbitmq-nio/blob/cb9c294fda00f57db116abd297df21d078b5d027/Sources/AMQPClient/AMQPChannel.swift#L137C1-L162C6)
    /// function reference which is the underlying implementation used for consuming.
    ///
    /// - Parameters:
    ///   - consumerTag: Optional consumer tag/name to use. If not provided, will be generated by the broker.
    ///   - noAck: If `true`, the library will automatically ACK/NACK the message that is consumed.
    ///   - exclusive: If `true`, the queue used by this consumer will only be allowed to be consumed by this consumer.
    ///   - args: Table of additional custom arguments to set for the consumer.
    public init(
        consumerTag: String = "",
        noAck: Bool = false,
        exclusive: Bool = false,
        args: Table = Table()
    ) {
        self.consumerTag = consumerTag
        self.noAck = noAck
        self.exclusive = exclusive
        self.args = args
    }
}
